##OA3602 Project 1
## Authors: Colton Kawamura and Bryan Lowry
## Date: 19APR2019

#--------------------------Part a---------------------------------------------------
library(plotrix)
#Define given information
nreps <- 10000
R <- .85
r_rocket <- R
pdam <- .9
PD <- NULL

#Munition Coordinates
wx = rep(c(1,2,3,4,5,6,7),5)
wy = c(rep(1,7),rep(2,7),rep(3,7),rep(4,7),rep(5,7))

#Begin Monte Carlo Simulation for "nreps" of targets with a uniform distrubtion
for (reps in 1:nreps) {
  xtgt <- 8*runif(1); ytgt <- 6*runif(1) #Creates x,y coordinates for targets
  dist <- sqrt((wx-xtgt)^2+(wy-ytgt)^2)
  n = sum(dist<=R)    #number of disks covering the current sample target
  pd <- 1-(1-pdam)^n  #prob. of 1 or more of the n disks neutralizing the target
  PD <- c(PD,pd)        #update the PD vector
}

#Calculate the 99% Confidence Interval
PD_mean <- mean(PD);PD_mean
PD_mean_error <- qnorm(.995)*sd(PD)/sqrt(nreps); PD_mean_error

#Plot rocket positions with .85 m*100 coverage
rockets_x <- c(1,2,3,4,5,6,7)
rockets_y <- c(1,2,3,4,5)

plot(c(1,1,1,1,1), rockets_y, xlim=c(0,8),ylim=c(-1,6))

text(4,-.5, paste0("99% CI= ", round(PD_mean, 3), " +/- ", round(PD_mean_error, 4)))

points(c(2,2,2,2,2), rockets_y)
points(c(3,3,3,3,3), rockets_y)
points(c(4,4,4,4,4), rockets_y)
points(c(5,5,5,5,5), rockets_y)
points(c(6,6,6,6,6), rockets_y)
points(c(7,7,7,7,7), rockets_y)

draw.ellipse(1,1,R,R, border="red")
draw.ellipse(1,2,R,R, border="red")
draw.ellipse(1,3,R,R, border="red")
draw.ellipse(1,4,R,R, border="red")
draw.ellipse(1,5,R,R, border="red")

draw.ellipse(2,1,R,R, border="red")
draw.ellipse(2,2,R,R, border="red")
draw.ellipse(2,3,R,R, border="red")
draw.ellipse(2,4,R,R, border="red")
draw.ellipse(2,5,R,R, border="red")

draw.ellipse(3,1,R,R, border="red")
draw.ellipse(3,2,R,R, border="red")
draw.ellipse(3,3,R,R, border="red")
draw.ellipse(3,4,R,R, border="red")
draw.ellipse(3,5,R,R, border="red")

draw.ellipse(4,1,R,R, border="red")
draw.ellipse(4,2,R,R, border="red")
draw.ellipse(4,3,R,R, border="red")
draw.ellipse(4,4,R,R, border="red")
draw.ellipse(4,5,R,R, border="red")

draw.ellipse(5,1,R,R, border="red")
draw.ellipse(5,2,R,R, border="red")
draw.ellipse(5,3,R,R, border="red")
draw.ellipse(5,4,R,R, border="red")
draw.ellipse(5,5,R,R, border="red")

draw.ellipse(6,1,R,R, border="red")
draw.ellipse(6,2,R,R, border="red")
draw.ellipse(6,3,R,R, border="red")
draw.ellipse(6,4,R,R, border="red")
draw.ellipse(6,5,R,R, border="red")

draw.ellipse(7,1,R,R, border="red")
draw.ellipse(7,2,R,R, border="red")
draw.ellipse(7,3,R,R, border="red")
draw.ellipse(7,4,R,R, border="red")
draw.ellipse(7,5,R,R, border="red")
rect(0, 0, 8, 6, border="black")
grid(NULL,NULL)

#-----------------------------Part b----------------------------------

#Redefine given information
nreps <- 10000
R <- .85
pdam <- .9
PD <- NULL
PD_mean <-NULL
PD_mean_array <- NULL
PD_mean_error_array <- NULL
s = seq(0.9,1.4,0.05) # spacing array
# Run each simulation for different munitions spacing
for (j in 1:length(s)) {
  wx = rep(seq(4-3*s[j],4+3*s[j],s[j]),5)
  wy = c(rep(3-2*s[j],7),rep(3-s[j],7),rep(3,7),rep(3+s[j],7),rep(3+2*s[j],7))
  for (reps in 1:nreps) {
    xtgt <- 8*runif(1); ytgt <- 6*runif(1) #Creates x,y coordinates for targets
    dist <- sqrt((wx-xtgt)^2+(wy-ytgt)^2)
    n = sum(dist<=R)    #number of disks covering the current sample target
    pd <- 1-(1-pdam)^n  #prob. of 1 or more of the n disks neutralizing the target
    PD <- c(PD,pd)        #update the PD vector
  }
  #Calculate the 99% Confidence Interval
  PD_mean <- mean(PD)
  PD_mean_error <- qnorm(.995)*sd(PD)/sqrt(nreps)
  PD_mean_array[j]=PD_mean
  PD_mean_error_array[j]=PD_mean_error
  PD <- NULL
  PD_mean <-NULL
}
plot(s,PD_mean_array,col="red",
     ylab="Probability of Damage",xlab="Munition Spacing",
     ylim=c(0.7,1),xaxs="i",yaxs="i")
lines(s,rep(.94,length(s)))
text(1.2,0.85, paste0("Max PD 99% CI= ", round(max(PD_mean_array), 3), " +/- ", round(PD_mean_error_array[6], 4)))
text(1,0.95,paste0("Prob. Damage = 0.94"))
text(1.2,0.83,paste0("n = 10000"))
lines(s,PD_mean_array+PD_mean_error_array,lty=2,col="red")
lines(s,PD_mean_array-PD_mean_error_array,lty=2,col="red")
grid(5,6)

#-----------------------------Part c.1----------------------------------

#Define given information
nreps <- 10000
R <- .85
r_rocket <- R
pdam <- .9
PD <- NULL
PD_mean <-NULL
sd=.15

# Monte Carlo
for (reps in 1:nreps) {
  # Generate Munitions Coordinates
  wx = rep(c(1,2,3,4,5,6,7),5)
  wy = c(rep(1,7),rep(2,7),rep(3,7),rep(4,7),rep(5,7))
  xx=rnorm(length(wx),mean=0,sd=.15)
  yy=rnorm(length(wy),mean=0,sd=.15)
  x=wx+xx
  y=wy+yy
  # Generate target
  xtgt <- 8*runif(1); ytgt <- 6*runif(1) #Creates x,y coordinates for targets
  dist <- sqrt((wx-xtgt)^2+(wy-ytgt)^2)
  n = sum(dist<=R)    #number of disks covering the current sample target
  pd <- 1-(1-pdam)^n  #prob. of 1 or more of the n disks neutralizing the target
  PD <- c(PD,pd)        #update the PD vector
}
#Calculate the 99% Confidence Interval
PD_mean <- mean(PD);PD_mean
PD_mean_error <- qnorm(.995)*sd(PD)/sqrt(nreps); PD_mean_error
# Plot hits
plot(x,y,xlim=c(-1,9),ylim=c(-1,7),xlab="X Position",ylab="Y Position",xaxs="i",yaxs="i")
grid(10,8)
for (i in 1:35){
    draw.ellipse(x[i],y[i],R,R,border="red")
}
text(4,-.5, paste0("99% CI= ", round(PD_mean, 3), " +/- ", round(PD_mean_error, 4)))
text(4,-.75, paste0("Munition Spacing = 1 (100m), Dispersion SD: 0.15 (15m)"))
lines(c(0,1,2,3,4,5,6,7,8),rep(0,9))
lines(c(0,1,2,3,4,5,6,7,8),rep(6,9))
lines(rep(0,7),c(0,1,2,3,4,5,6))
lines(rep(8,7),c(0,1,2,3,4,5,6))

#---------------------------Part c.2----------------------------------------

#attempt to raise PD above .94
nreps <- 10000
R <- .85
r_rocket <- R
pdam <- .9
PD <- NULL
PD_mean <-NULL
PD_mean_array <- NULL
PD_mean_error_array <- NULL
s = seq(0.9,1.4,0.05) # spacing array
# Run each simulation for different munitions spacing
for (j in 1:length(s)) {
  wx = rep(seq(4-3*s[j],4+3*s[j],s[j]),5)
  wy = c(rep(3-2*s[j],7),rep(3-s[j],7),rep(3,7),rep(3+s[j],7),rep(3+2*s[j],7))
  xx=rnorm(length(wx),mean=0,sd=.15)
  yy=rnorm(length(wy),mean=0,sd=.15)
  x=wx+xx
  y=wy+yy
  for (reps in 1:nreps) {
    xtgt <- 8*runif(1); ytgt <- 6*runif(1) #Creates x,y coordinates for targets
    dist <- sqrt((wx-xtgt)^2+(wy-ytgt)^2)
    n = sum(dist<=R)    #number of disks covering the current sample target
    pd <- 1-(1-pdam)^n  #prob. of 1 or more of the n disks neutralizing the target
    PD <- c(PD,pd)        #update the PD vector
  }
  #Calculate the 99% Confidence Interval
  PD_mean <- mean(PD)
  PD_mean_error <- qnorm(.995)*sd(PD)/sqrt(nreps)
  PD_mean_array[j]=PD_mean
  PD_mean_error_array[j]=PD_mean_error
  PD <- NULL
  PD_mean <-NULL
}
plot(s,PD_mean_array,col="red",
     ylab="Probability of Damage",xlab="Munition Spacing",
     ylim=c(0.7,1),xaxs="i",yaxs="i")
lines(s,rep(.94,length(s)))
text(1.2,0.85, paste0("Max PD 99% CI= ", round(max(PD_mean_array), 3), " +/- ", round(PD_mean_error_array[6], 4)))
text(1,0.95,paste0("Prob. Damage = 0.94"))
text(1.2,0.83,paste0("n = 10000"))
lines(s,PD_mean_array+PD_mean_error_array,lty=2,col="red")
lines(s,PD_mean_array-PD_mean_error_array,lty=2,col="red")
grid(5,6)

#1.15 looks to be the best, run it now
#redefine given information
nreps <- 10000
R <- .85
r_rocket <- R
pdam <- .9
PD <- NULL
PD_mean <-NULL
sd=.15
s=1.15 #best spacing from above
# Monte Carlo
for (reps in 1:nreps) {
  # Generate Munitions Coordinates
  wx = rep(seq(4-3*s,4+3*s,s),5)
  wy = c(rep(3-2*s,7),rep(3-s,7),rep(3,7),rep(3+s,7),rep(3+2*s,7))
  xx=rnorm(length(wx),mean=0,sd=.15)
  yy=rnorm(length(wy),mean=0,sd=.15)
  x=wx+xx
  y=wy+yy
  # Generate target
  xtgt <- 8*runif(1); ytgt <- 6*runif(1) #Creates x,y coordinates for targets
  dist <- sqrt((wx-xtgt)^2+(wy-ytgt)^2)
  n = sum(dist<=R)    #number of disks covering the current sample target
  pd <- 1-(1-pdam)^n  #prob. of 1 or more of the n disks neutralizing the target
  PD <- c(PD,pd)        #update the PD vector
}
#Calculate the 99% Confidence Interval
PD_mean <- mean(PD);PD_mean
PD_mean_error <- qnorm(.995)*sd(PD)/sqrt(nreps); PD_mean_error
# Plot hits
plot(x,y,xlim=c(-1,9),ylim=c(-1,7),xlab="X Position",ylab="Y Position",xaxs="i",yaxs="i")
for (i in 1:35){
  draw.ellipse(x[i],y[i],R,R,border="red")
}
text(4,-.5, paste0("99% CI= ", round(PD_mean, 3), " +/- ", round(PD_mean_error, 4)))
text(4,-.75, paste0("Munition Spacing = 1.15 (115m), Dispersion SD: 0.15 (15m)"))
lines(c(0,1,2,3,4,5,6,7,8),rep(0,9))
lines(c(0,1,2,3,4,5,6,7,8),rep(6,9))
lines(rep(0,7),c(0,1,2,3,4,5,6))
lines(rep(8,7),c(0,1,2,3,4,5,6))
grid(10,8)

#--------------------------Part d---------------------------------------------------

#Define given variables
A_LZ <- 8*6 #meters*100
r <- .85 #meters*100
n <- c(1:40)

#Define the coverage factor
CF <- n*pi*r^2/A_LZ
CF_min <- pmin(CF, .9069)

#Calculate the PD using the exhaustive search approximation
PD_3 <- pmin(CF,1)

#Plot
plot(n, PD_3, xlab="n", ylab="Probability", xlim=c(0,40), ylim=c(0,1.1))
lines(n, PD_3, col="red")

#Define overlap region
overlap_lower <- .2887*A_LZ/r^2
overlap_upper <- .3849*A_LZ/r^2

abline(v = overlap_lower)
abline(v = overlap_upper)
abline(v = 35, col='red')
abline(h = .94, col='blue')

text(10,.1, paste0("Overlap=  ", round(overlap_lower, 4), " and ", round(overlap_upper, 4)))



